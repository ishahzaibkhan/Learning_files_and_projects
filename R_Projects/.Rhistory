index_top_movie <- which(movie_ratings == highest_rating)
# Fetching only the name oftop rated movie
top_movie <- names(movie_list)[index_top_movie]
return(list(
"highest_rated_movie" = top_movie,
"average_rating" = average_rating
))
}
movie_rating(movies)
movies <- list(
"The Lion King" = 9.0,
"Frozen" = 7.5,
"Toy Story" = 8.3,
"Aladdin" = 9.2,
"Beauty and the Beast" = 8.5,
"Finding Nemo" = 8.1,
"Moana" = 7.8,
"Zootopia" = 8.7,
"Coco" = 9.1,
"Mulan" = 8.4
)
movie_rating <- function(movie_list) {
# Extracting the ratings only from the named list
movie_ratings <- unlist(movie_list, use.names = FALSE)
highest_rating <- max(movie_ratings)
average_rating <- mean(movie_ratings)
# using which function to identify the index of the highest rating from the movies rating
index_top_movie <- which(movie_ratings == highest_rating)
# Fetching only the name oftop rated movie
top_movie <- names(movie_list)[index_top_movie]
return(list(
"highest_rated_movie" = top_movie,
"average_rating" = average_rating
))
}
movie_rating(movies)
check_inventory <- function(stock, threshold) {
product_quantities <- unlist(stock, use.names = FALSE)
products <- c(product_quantities > threshold)
}
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
# Write a function that takes a list of product names and quantities and
# returns a list of products that are low in stock (below a specified threshold).
check_inventory <- function(products_list, threshold) {
product_quantities <- unlist(products_list, use.names = FALSE)
products <- c(product_quantities > threshold)
return(products)
}
check_inventory(products, 15)
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
# Write a function that takes a list of product names and quantities and
# returns a list of products that are low in stock (below a specified threshold).
check_inventory <- function(products_list, threshold) {
product_quantities <- unlist(products_list, use.names = FALSE)
products <- c(product_quantities < threshold)
return(products)
}
check_inventory(products, 15)
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
# Write a function that takes a list of product names and quantities and
# returns a list of products that are low in stock (below a specified threshold).
check_inventory <- function(products_list, threshold) {
product_quantities <- unlist(products_list, use.names = FALSE)
products <- c(product_quantities < threshold)
names(products_list)[products]
return(products)
}
check_inventory(products, 15)
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
# Write a function that takes a list of product names and quantities and
# returns a list of products that are low in stock (below a specified threshold).
check_inventory <- function(products_list, threshold) {
product_quantities <- unlist(products_list, use.names = FALSE)
products <- c(product_quantities < threshold)
low_stock_products <- names(products_list)[products]
return(low_stock_products)
}
check_inventory(products, 15)
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
check_inventory <- function(products_list, threshold) {
product_quantities <- unlist(products_list, use.names = FALSE)
products <- product_quantities < threshold
low_stock_products <- names(products_list)[products]
return(low_stock_products)
}
check_inventory(products, 15)
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
check_inventory <- function(products_list, threshold) {
# Extracting the quantities only from the named list
product_stock <- unlist(products_list, use.names = FALSE)
# checking the number of products below threshold
stock_below_threshold <- product_stock < threshold
# Storing the names of products that are low in stock
low_stock_products <- names(products_list)[products]
return(low_stock_products)
}
check_inventory(products, 15)
products <- list(
"Apples" = 50,
"Bananas" = 30,
"Oranges" = 25,
"Grapes" = 15,
"Watermelons" = 10,
"Pineapples" = 8,
"Strawberries" = 20,
"Blueberries" = 12,
"Cherries" = 5,
"Mangoes" = 18
)
check_inventory <- function(products_list, threshold) {
# Extracting the quantities only from the named list
product_stock <- unlist(products_list, use.names = FALSE)
# checking the number of products below threshold
stock_below_threshold <- product_stock < threshold
# Storing the names of products that are low in stock
low_stock_products <- names(products_list)[stock_below_threshold]
return(low_stock_products)
}
check_inventory(products, 15)
monthly_expenses <- list(280, 150, 370, 460, 130, 430, 320 , 890, 100)
calculate_expenses <- function(expenses_list, threshold) {
total_expenses <- 0
highest_expense <- monthly_expenses[1]
count <- 0
total_expenses <- sum(expenses_list)
highest_expense <- max(expenses_list)
expenses_above_threshold <-length(expenses_list < threshold)
result <- list(
"total_expense" = total_expenses,
"highest_expense" = highest_expense,
"entries_above_threshold" = expenses_above_threshold
)
return(result)
}
calculate_expenses(monthly_expenses, 200)
total_expenses <- sum(expenses_list)
monthly_expenses <- list(280, 150, 370, 460, 130, 430, 320 , 890, 100)
calculate_expenses <- function(expenses_list, threshold) {
total_expenses <- sum(expenses_list)
highest_expense <- max(expenses_list)
expenses_above_threshold <- length(expenses_list < threshold)
result <- list(
"total_expense" = total_expenses,
"highest_expense" = highest_expense,
"entries_above_threshold" = expenses_above_threshold
)
return(result)
}
calculate_expenses(monthly_expenses, 200)
monthly_expenses <- list(280, 150, 370, 460, 130, 430, 320 , 890, 100)
calculate_expenses <- function(expenses_list, threshold) {
total_expenses <- sum(expenses_list)
highest_expense <- max(expenses_list)
expenses_above_threshold <- length(expenses_list < threshold)
result <- list(
"total_expense" = total_expenses,
"highest_expense" = highest_expense,
"entries_above_threshold" = expenses_above_threshold
)
return(result)
}
calculate_expenses(monthly_expenses, 200)
monthly_expenses <- list(280, 150, 370, 460, 130, 430, 320 , 890, 100)
calculate_expenses <- function(expenses_list, threshold) {
expenses_list_vector <- unlist(expenses_list)
total_expenses <- sum(expenses_list_vector)
highest_expense <- max(expenses_list_vector)
expenses_above_threshold <- length(expenses_list_vector < threshold)
result <- list(
"total_expense" = total_expenses,
"highest_expense" = highest_expense,
"entries_above_threshold" = expenses_above_threshold
)
return(result)
}
calculate_expenses(monthly_expenses, 200)
monthly_expenses <- list(280, 150, 370, 460, 130, 430, 320 , 890, 100)
calculate_expenses <- function(expenses_list, threshold) {
expenses_list_vector <- unlist(expenses_list)
total_expenses <- sum(expenses_list_vector)
highest_expense <- max(expenses_list_vector)
expenses_above_threshold <- sum(expenses_list_vector < threshold)
result <- list(
"total_expense" = total_expenses,
"highest_expense" = highest_expense,
"entries_above_threshold" = expenses_above_threshold
)
return(result)
}
calculate_expenses(monthly_expenses, 200)
monthly_expenses <- list(280, 150, 370, 460, 130, 430, 320 , 890, 100)
calculate_expenses <- function(expenses_list, threshold) {
expenses_list_vector <- unlist(expenses_list)
total_expenses <- sum(expenses_list_vector)
highest_expense <- max(expenses_list_vector)
expenses_above_threshold <- sum(expenses_list_vector > threshold)
result <- list(
"total_expense" = total_expenses,
"highest_expense" = highest_expense,
"entries_above_threshold" = expenses_above_threshold
)
return(result)
}
calculate_expenses(monthly_expenses, 200)
install.packages("palmerpenguins")
library(palmerpenguins)
data("penguins")
View(penguins)
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
library(ggplot2)
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
View(penguins)
ggplot(penguins) + geom_histogram(mapping = aes(sex))
ggplot(penguins) + geom_histogram(mapping = aes(x=sex))
ggplot(penguins) + geom_histogram(mapping = aes(x="sex"))
ggplot(penguins, aes(x="sex")) + geom_histogram()
ggplot(data = penguins, aes(x="sex")) + geom_histogram()
ggplot(data = penguins, aes(x=sex)) + geom_histogram()
ggplot(data = penguins, aes(x=sex)) + geom_histogram() + stat_bin(binwidth = 1)
ggplot(data = penguins) + geom_histogram() + stat_bin(aes(x=sex))
ggplot(penguins, aes(x=sex)) +
geom_histogram(binwidth=1)
ggplot(data = penguins, aes(x=sex)) + geom_histogram()
ggplot(mtcars, aes(x = sex)) + geom_histogram(aes(y = ..density..)
ggplot(mtcars, aes(x = sex)) + geom_histogram(aes(y = ..density..)
ggplot(penguins, aes(x = sex)) + geom_histogram(aes(y = ..density..)
ggplot(penguins, aes(x = sex)) +
ggplot(penguins, aes(x = sex)) + geom_bar(fill = "steelblue", color = "black") + labs(title = "Distribution of Penguins by Sex", x = "Sex", y = "Count") + theme_minimal()
ggplot(penguins, aes(x = sex)) + geom_bar(fill = "steelblue", color = "black") + labs(title = "Distribution of Penguins by Sex", x = "Sex", y = "Count")
ggplot(penguins, aes(x = sex))  + labs(title = "Distribution of Penguins by Sex", x = "Sex", y = "Count")
ggplot(penguins, aes(x = sex)) + geom_bar(fill = "steelblue", color = "black") + labs(title = "Distribution of Penguins by Sex", x = "Sex", y = "Count")
install.packages("RCurl")
library(RCurl)
library(datasets)
iris <- data("iris")
#2 get the summary statistics of the data
View(iris)
library(datasets)
data("iris")
#2 get the summary statistics of the data
View(iris)
unique(iris)
unique(iris$Species)
head(iris, 4)
tail(iris, 4)
summary(iris)
summary(iris$Petal.Width)
sum(is.na(iris$Sepal.Length))
sum(is.na(iris))
library(skimr)
skim(iris)
library(dplyr)
iris %>%
group_by(Species)
iris %>%
group_by(Species) %>%
skim()
data("Titanic")
View(Titanic)
skim(Titanic)
data("iris")
plot(iris)
plot(iris, col = "blue")
plot(iris, col = "green")
blue
plot(iris, col = "blue")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "blue")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "blue", xlab = "Sepal Length", ylab = "Sepal Width")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "blue", xlab = "Sepal Length", ylab = "Sepal Width", title = "Width vs Length")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "blue", xlab = "Sepal Length", ylab = "Sepal Width", main = "Width vs Length")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "blue", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal Width vs Length")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "blue", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "green", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
plot(iris$Species, iris$Sepal.Width, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
)
plot(iris$Sepal.Length, iris$Sepal.Width, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
plot(iris$Sepal.Width, iris$Sepal.Length, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
plot(iris$Sepal.Width, iris$Sepal.Length, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, col = "red")
plot(iris$Sepal.Length, iris$Sepal.Width, col = "black", xlab = "Sepal Length", ylab = "Sepal Width", main = "Sepal (Width vs Length)")
hist(iris$Sepal.Length)
hist(iris$Species)
hist(iris$Species)
Sepal.Length
hist(iris$Sepal.Length)
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length, iris$Sepal.Width)
boxplot(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length)
library(ggplot2)
library(dplyr)
# The dataset is provided in the gapminder library
library(gapminder)
library()
library(ggplot2)
library(dplyr)
library(palmerpenguins)
data("penguins")
ggplot(df) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, size = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm,color = species size = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm,color = species, size = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm,color = species, size = species, apha= species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm,color = species, size = species, alpha= species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, size = species, alpha= species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, shape = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, shape = species, size = species, alpha= species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, shape = species, size = species, alpha= species, color = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, shape = species, size = species,  color = species))
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, shape = species, color = species))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, shape = species, color = species))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm))
# combining two plots infront of eachother
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species)) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, linetype = species))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, linetype = species, linewidth = species))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, linewidth = species))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, linetype = species))
ggplot(penguins) + geom_smooth(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, linetype = species, color = species))
#jitter plot
ggplot(penguins) + geom_jitter(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species))
#jitter plot
ggplot(penguins) + geom_jitter(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm))
#jitter plot
ggplot(penguins) + geom_jitter(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species))
#jitter plot
ggplot(penguins) + geom_jitter(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species)) + geom_smooth(mapping = aes(x= body_mass_g, y flipper_length_mm))
#jitter plot
ggplot(penguins) + geom_jitter(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species)) + geom_smooth(mapping = aes(x= body_mass_g, y = flipper_length_mm))
# bar plot
ggplot(diamonds) + geom_bar(mapping = aes(x= cut))
# bar plot
ggplot(diamonds) + geom_bar(mapping = aes(x= cut, fill = cut))
ggplot(diamonds) + geom_bar(mapping = aes(x= cut, fill = clarity))
ggplot(penguins) + geom_line(mapping = aes(x = body_mass_g))
ggplot(penguins) + geom_line(mapping = aes(x = body_mass_g, y = flipper_length_mm))
ggplot(penguins) + geom_line(mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species))
ggplot(penguins) + geom_area(mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species))
ggplot(penguins) + geom_area(mapping = aes(x = body_mass_g, y = flipper_length_mm, fill = species))
#facet
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species)) + facet_wrap(~species)
ggplot(diamonds) + geom_point(mapping = aes(x=cut, y = clarity, color = species))
ggplot(diamonds) + geom_point(mapping = aes(x=cut, y = clarity))
ggplot(diamonds) + geom_bar(mapping = aes(x= cut, fill = cut)) + facet_wrap(~clarity)
ggplot(diamonds) + geom_bar(mapping = aes(x= cut, fill = cut)) + facet_wrap(~cut)
ggplot(diamonds) + geom_bar(mapping = aes(x= cut)) + facet_wrap(~cut)
, fill = cut
ggplot(penguins) + geom_point(mapping = aes(x=penguins$body_mass_g, y = penguins$flipper_length_mm, color = species)) + facet_wrap(sex~species)
hotel_booking <- read.csv("./hotel_bookings.csv")
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel))
colnames(hotel_booking)
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel)) + facet_wrap(~deposit_type)
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel, fill = deposit_type))
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel, fill = deposit_type)) + facet_wrap(~deposit_type)
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel)) + facet_wrap(~deposit_type)
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel, fill = deposit_type))
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel, fill = market_segment))
ggplot(hotel_booking) + geom_bar(mapping = aes(x = distribution_channel)) + facet_wrap(~market_segment)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap(~deposit_type~market_segment)
ggplot(data = hotel_bookings) +
geom_bar(mapping = aes(x = distribution_channel)) +
facet_wrap( ~ deposit_type ~ market_segment)
ggplot(data = hotel_bookings) + geom_bar(mapping = aes(x = distribution_channel)) + facet_wrap( ~ deposit_type ~ market_segment)
ggplot(data = hotel_booking) + geom_bar(mapping = aes(x = distribution_channel)) + facet_wrap( ~ deposit_type ~ market_segment)
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
# Load the necessary packages
library(dplyr)
# Create a sample dataset with continuous data and a greater number of instances
set.seed(123)
sample_data <- data.frame(
Age = rnorm(1000, mean = 30, sd = 5),
Income = rnorm(1000, mean = 50000, sd = 10000)
)
# Discretization of Age and Income into three bins each
sample_data <- sample_data %>%
mutate(Age_Category = cut(Age, breaks = 3, labels = c("Young", "Middle-aged", "Senior")),
Income_Category = cut(Income, breaks = 3, labels = c("Low", "Medium", "High")))
# View the first few rows of the discretized dataset
head(sample_data)
# Load the necessary packages
library(dplyr)
# Create a sample dataset with continuous data and a greater number of instances
set.seed(123)
sample_data <- data.frame(
Age = rnorm(1000, mean = 30, sd = 5),
Income = rnorm(1000, mean = 50000, sd = 10000)
)
# Discretization of Age and Income into three bins each
sample_data <- sample_data %>%
mutate(Age_Category = cut(Age, breaks = 4, labels = c("Young", "Middle-aged", "Senior", "New")),
Income_Category = cut(Income, breaks = 4, labels = c("Low", "Medium", "High", "New")))
# View the first few rows of the discretized dataset
head(sample_data)
sample_data
View(sample_data)
#Sample data
data<-data.frame(
feature1=c(10,20,30,40,50),
feature2=c(1,2,3,4,5)
)
#Min-Max scaling
min_max_scale<-fuction(x){
#Sample data
data<-data.frame(
feature1=c(10,20,30,40,50),
feature2=c(1,2,3,4,5)
)
#Min-Max scaling
min_max_scale<-fuction(x){
ggplot(penguins) + geom_point(mapping = aes(
x = penguins$body_mass_g,
y = penguins$flipper_length_mm,
color = species
)) + geom_smooth(mapping = aes(x = penguins$body_mass_g, y = penguins$flipper_length_mm))
library(ggplot2)
library(palmerpenguins)
ggplot(penguins) + geom_smooth(mapping = aes(x = penguins$body_mass_g, y = penguins$flipper_length_mm))
ggplot(penguins) + geom_point(mapping = aes(
x = penguins$body_mass_g,
y = penguins$flipper_length_mm,
color = species
)) + geom_smooth(mapping = aes(x = penguins$body_mass_g, y = penguins$flipper_length_mm))
# importing libraries with tidyverse including ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, and forcats
library(tidyverse)
df <-- read.csv("../VSCode/Personal_Finanance_Tracker/Personal_Finance_Dataset.csv")
df.head()
head(df)
df
data(df)
df
# importing personal finance file
personal_finance <-- read.csv("../VSCode/Personal_Finanance_Tracker/Personal_Finance_Dataset.csv")
personal_finance <-- read.csv("../VSCode/Personal_Finanance_Tracker/Personal_Finance_Dataset.csv")
# importing personal finance file
personal_finance <-- read.csv("./Personal_Finance_Dataset.csv")
# importing personal finance file
personal_finance <-- read.csv("./Personal_Finance_Dataset.csv")
